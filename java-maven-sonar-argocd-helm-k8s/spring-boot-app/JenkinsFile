def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]
pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    } 
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/avi7049/project_cicd.git'
      }
    }
    stage ('Check git Secrets'){
        steps {
            sh 'rm trufflehog || true'
            sh 'docker run gesellix/trufflehog --json https://github.com/avi7049/project_cicd.git > trufflehog'
            sh 'cat trufflehog'
        }
    }
    stage ('Source Composition Analysis') {
        steps {
            //dependencyCheck additionalArguments: '', odcInstallation: 'DP-check' 
            //dependencyCheckPublisher pattern: '**/depenency-check-report.xml'
            sh 'rm owasp* || true'
            sh 'curl -O "https://raw.githubusercontent.com/avi7049/project_cicd/main/java-maven-sonar-argocd-helm-k8s/spring-boot-app/owasp-dependency-check.sh"'
            sh 'chmod +x owasp-dependency-check.sh'
            sh 'bash owasp-dependency-check.sh'
        }
    }
    
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    //stage('Checkstyle Analysis') {
            //steps {
                //sh 'mvn checkstyle:checkstyle'
            //}
        //}
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.159.130:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    //stage ("Docker Pull Dastardly from Burp Suite container image") {
            //steps {
          //      sh 'docker pull public.ecr.aws/portswigger/dastardly:latest'
        //    }
      //  }
    //stage ("Docker run Dastardly from Burp Suite Scan") {
            //steps {
              //  cleanWs()
                //sh '''
                  //  docker run --user $(id -u) -v ${WORKSPACE}:${WORKSPACE}:rw \
                    //-e DASTARDLY_TARGET_URL=https://ginandjuice.shop/ \
                    //-e DASTARDLY_OUTPUT_FILE=${WORKSPACE}/dastardly-report.xml \
                    //public.ecr.aws/portswigger/dastardly:latest
                //'''
            //}
       // }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "avivv/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "project_cicd"
            GIT_USER_NAME = "avi7049"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "avivijayvargiya999@gmail.com"
                    git config user.name "avi vijayvargiya"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
  post {
    always {
        echo 'Slack Notification.'
        slackSend channel: '#cicd',
            color: COLOR_MAP[currentBuild.currentResult],
            message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} " 
        //junit testResults: 'dastardly-report.xml', skipPublishingChecks: true
    }
  }
}
